<lightning_data.PromptDataModule object at 0x7f4e31234fb0>
None
['the orange block is clear, the yellow block is clear, the hand is empty, the blue block is on top of the red block, the orange block is on top of the blue block, the red block is on the table and the yellow block is on the table', 'the blue block is on top of the red block and the yellow block is on top of the orange block', ['pick up the yellow block', 'stack the yellow block on top of the orange block']]
['[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 6, 0]]', '[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]', 'select a function']
Training: |          | 0/? [00:00<?, ?it/s]Training:   0%|          | 0/15 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/15 [00:00<?, ?it/s] Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d50236120>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
Action: functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None)
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ef140>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
Action logits [tensor([-166.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-187.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-114.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-129.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-52.6875],
        [-73.1875],
        [-25.8125],
        [-28.8125],
        [  0.0000],
        [-32.1875],
        [-15.3125],
        [-24.3125],
        [-24.9375]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.3125e-23],
        [1.6409e-32],
        [6.1627e-12],
        [3.0682e-13],
        [1.0000e+00],
        [1.0499e-14],
        [2.2380e-07],
        [2.7619e-11],
        [1.4784e-11]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0000, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d501fdb80>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0)]
tensor([-75.3125, -92.5625, -45.9375, -48.9375, -47.3125, -76.3125, -61.5625,
          0.0000, -20.0625], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503dc740>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True)]
tensor([-68.0625, -88.4375, -41.4375, -44.5625, -30.9375, -52.0625,   0.0000,
         -9.1875,  -6.8125], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0000e+00, 1.0228e-04, 1.0996e-03], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1.0010, device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502d3470>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0)]
Action logits [tensor([-170.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-187.], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-126.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-150.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-81.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-112.2500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-22.3750],
        [-26.4062],
        [-14.9062],
        [-15.6250],
        [-11.1719],
        [-17.3438],
        [-14.8125],
        [  0.0000],
        [ -7.7188]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.9172e-10],
        [3.4034e-12],
        [3.3597e-07],
        [1.6374e-07],
        [1.4064e-05],
        [2.9357e-08],
        [3.6899e-07],
        [1.0000e+00],
        [4.4442e-04]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0005, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function identityM at 0x7f4d641ba2a0>)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d50291580>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False)]
Action logits [tensor([-167.], device='cuda:0', grad_fn=<CopySlices>), tensor([-186.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-160.], device='cuda:0', grad_fn=<CopySlices>), tensor([-134.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-81.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-105.8125], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-21.3438],
        [-26.1875],
        [-14.5312],
        [-15.2500],
        [-19.5938],
        [-13.1875],
        [  0.0000],
        [-16.2188],
        [ -6.0469]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[5.3768e-10],
        [4.2356e-12],
        [4.8883e-07],
        [2.3824e-07],
        [3.0942e-09],
        [1.8739e-06],
        [1.0000e+00],
        [9.0425e-08],
        [2.3652e-03]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0024, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function identityM at 0x7f4d641ba2a0>)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d501fe3c0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True)]
tensor([-71.0625, -88.3125, -41.6875, -44.6875, -15.8125,   0.0000, -61.5625,
        -57.3125, -53.8125], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.1921e-07, 1.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502366c0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502366c0>, newColor=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33))]
tensor([-61.4375, -80.8125, -34.4375, -37.4375, -91.8125, -20.5000, -23.0625,
        -34.0625,   0.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503dddf0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False)]
Action logits [tensor([-170.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-187.], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-156.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-99.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-211.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.3750], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[ -71.8125],
        [ -87.9375],
        [ -41.9375],
        [ -44.8125],
        [ -57.5625],
        [   0.0000],
        [-112.8125],
        [ -47.0625],
        [ -41.3125]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[6.4897e-32],
        [6.4451e-39],
        [6.1203e-19],
        [3.4529e-20],
        [1.0021e-25],
        [1.0000e+00],
        [0.0000e+00],
        [3.6393e-21],
        [1.1434e-18]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True)
[[6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d501fc080>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False)]
Action: functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d50290770>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None)]
tensor([-56.1250, -73.3750, -26.7500, -29.7500, -26.8750, -55.8750, -57.1250,
          0.0000, -26.2500], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ee930>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True)]
tensor([-23.3750, -48.2500,   0.0000,  -2.8750,  -0.7500,  -0.3750,  -8.0000,
        -23.8750, -11.6250], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 1.0000e+00, 5.6427e-02, 4.7241e-01, 6.8750e-01,
        3.3545e-04, 0.0000e+00, 8.9407e-06], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(2.2168, device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ef650>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0)]
Action logits [tensor([-170.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-187.], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-156.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-128.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-108.5625], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-62.3125],
        [-78.4375],
        [-32.4375],
        [-35.3125],
        [-48.0625],
        [-20.0625],
        [-31.3125],
        [-37.5625],
        [  0.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[8.6701e-28],
        [8.6105e-35],
        [8.1766e-15],
        [4.6129e-16],
        [1.3388e-21],
        [1.9363e-09],
        [2.5186e-14],
        [4.8620e-17],
        [1.0000e+00]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d50291dc0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False)]
Action: functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ee7e0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True)]
tensor([-70.1250, -87.3750, -40.7500, -43.7500, -42.5000, -14.8750,  -8.3750,
          0.0000, -46.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.5763e-07,
        2.3055e-04, 1.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502d2c90>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True)]
tensor([ -61.8125,  -81.1875,  -34.8125,  -37.8125,  -16.2500,  -47.3125,
         -41.4375, -105.1875,    0.0000], device='cuda:0',
       grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.9605e-08, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500fe8d0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500fd340>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503b6d50>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d5035acf0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502341a0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503b7c80>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d501fd8b0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500ffbf0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Input type after conversion (if needed): torch.float32
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ee630>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503ee900>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500fd400>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d502d3d40>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500fc7d0>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d500fd970>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d5021a660>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f4d6403f100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f4d503cef30>, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=False), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Epoch 0:   7%|▋         | 1/15 [03:36<50:26,  0.00it/s]Epoch 0:   7%|▋         | 1/15 [03:36<50:30,  0.00it/s, v_num=75, train/loss_step=nan.0]Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None)]
Action: functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True)
[[7 7 7 7 7 7 7 7 7]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True)]
Action logits [tensor([-189.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-210.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-90.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-170.1250], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-24.6250],
        [-16.1250],
        [-29.9375],
        [-12.3125],
        [-13.8750],
        [-12.3125],
        [  0.0000],
        [-19.8125]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[2.0207e-11],
        [9.9312e-08],
        [9.9611e-14],
        [4.4952e-06],
        [9.4225e-07],
        [4.4952e-06],
        [1.0000e+00],
        [2.4862e-09]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0000, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud')
[[7 7 7 7 0 0 0 0 0]]
[[7 7 7 7 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None)]
tensor([ -86.8750,  -52.1250, -107.2500,    0.0000,  -46.1250,  -34.7500,
          -9.6875,  -36.3750], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
        6.2048e-05, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
tensor([-77.6250, -43.2500, -98.5000,   0.0000, -30.3750, -27.5000, -30.1250,
        -31.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 1., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
Action: functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2)
[[0 0 7 7 7 7 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
Action: functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)
[[0 0 0 0 0 0 0 0 0]]
[[0 0 0 0 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
tensor([ -87.5625,  -52.8125, -107.9375,  -36.5625,  -38.9375, -111.8125,
           0.0000,  -40.0625], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True)]
tensor([ -91.0625,  -57.1875, -113.5625,  -42.1875,  -43.6875,  -46.3125,
         -44.5625,    0.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None)]
Action logits [tensor([-188.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-153.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-208.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-136.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-90.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-145.], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.2500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[ -98.2500],
        [ -63.2500],
        [-118.5000],
        [ -45.8750],
        [   0.0000],
        [ -54.6250],
        [ -50.5000],
        [ -49.8750]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[2.1440e-43],
        [3.3953e-28],
        [0.0000e+00],
        [1.1933e-20],
        [1.0000e+00],
        [1.8909e-24],
        [1.1698e-22],
        [2.1856e-22]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud')
[[7 7 7 7 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False)]
Action logits [tensor([-190.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-210.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.2500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-51.1250],
        [-16.5000],
        [-71.5000],
        [ -3.0000],
        [ -4.2500],
        [  0.0000],
        [ -2.8750],
        [  0.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[6.2617e-23],
        [6.8256e-08],
        [8.8704e-32],
        [4.9787e-02],
        [1.4264e-02],
        [1.0000e+00],
        [5.6416e-02],
        [1.0000e+00]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(2.1205, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False)
[[7 7 7 7 0 0 0 0 0]]
[[7 7 7 7 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
tensor([ -84.6250,  -49.8750, -105.0000,  -33.5000,  -33.1250,    0.0000,
          -8.8125,  -33.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        1.4889e-04, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True)]
tensor([-50.7500, -16.2500, -71.1250,   0.0000,   0.0000,  -3.1250,  -3.2500,
         -1.2500], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 5.9605e-08, 0.0000e+00, 1.0000e+00, 1.0000e+00, 4.3945e-02,
        3.8788e-02, 2.8662e-01], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(2.3691, device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False)]
Action: functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True)
[[7 7 7 7]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function switchColors at 0x7f4d6403f920>), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
Action logits [tensor([-190.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-209.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-111.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-82.5625], device='cuda:0', grad_fn=<CopySlices>), tensor([-96.4375], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.1250], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-26.9531],
        [-18.1406],
        [-31.8281],
        [ -7.1719],
        [-14.1719],
        [  0.0000],
        [ -3.4688],
        [-14.6406]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.9697e-12],
        [1.3232e-08],
        [1.5039e-14],
        [7.6788e-04],
        [7.0022e-07],
        [1.0000e+00],
        [3.1156e-02],
        [4.3818e-07]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0319, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function switchColors at 0x7f4d6403f920>)
[[0 0 0 0 7 7 7 7 7]]
[[0 0 0 0 7 7 7 7 7]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False)]
tensor([ -90.6875,  -55.9375, -111.0625,  -25.0625,  -39.5625,    0.0000,
         -42.5625,  -41.9375], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 1., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
tensor([ -85.9375,  -50.6875, -105.5625,  -33.0625,    0.0000,  -38.9375,
          -6.8125,  -36.6875], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0011, 0.0000],
       device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1.0010, device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Input type after conversion (if needed): torch.float32
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f4d6403f600>, axis='lr'), functools.partial(<function mirror at 0x7f4d6403f600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f4d6403f740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f4d6403e700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f4d64047560>, f=functools.partial(<function pixelwiseAnd at 0x7f4d6403fe20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f4d640472e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f4d6403e2a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Epoch 0:  13%|█▎        | 2/15 [06:29<42:10,  0.01it/s, v_num=75, train/loss_step=nan.0]Epoch 0:  13%|█▎        | 2/15 [06:29<42:12,  0.01it/s, v_num=75, train/loss_step=nan.0]Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function replicateShapes at 0x7f4d640468e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Action: functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0)
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 3 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32))]
Action: functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set())
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None)]
tensor([-64.9375,   0.0000,  -1.0000, -91.9375, -43.0625, -41.8125, -51.8125,
        -42.1875, -54.0625, -41.0625, -44.3125,  -6.8750, -56.9375, -99.3125,
        -40.1875, -40.0625, -21.1250, -39.1875, -40.9375], device='cuda:0',
       grad_fn=<SubBackward0>)
tensor([0.0000, 1.0000, 0.3679, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0010, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1.3691, device='cuda:0', grad_fn=<SumBackward0>)
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f4d64045f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f4d64044180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f4d64045b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f4d64045c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f4d6403d9e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f4d641f7d80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f4d641f7e20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True), functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False), functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f4d6403e3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f4d6403eca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function paintShapesInHalf at 0x7f4d6403dbc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f4d6403dd00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f4d6403ede0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f4d6403ee80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f4d64046700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f4d6403d8a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f4d640468e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f4d64045da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f4d640460c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f4d64046340>, diagonal=True, multicolor=True, attributes={'PiXl'}), functools.partial(<function identityM at 0x7f4d641ba2a0>), functools.partial(<function layShapes at 0x7f4d640465c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f4d64046a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f4d64045e40>), functools.partial(<function cropAllBackground at 0x7f4d64047240>), functools.partial(<function switchColors at 0x7f4d6403f920>)]
Function functools.partial(<function arrangeShapes at 0x7f4d64046480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f4d6403f380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f4d6403c2c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f4d6403efc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f4d6403f4c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f4d6403db20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
