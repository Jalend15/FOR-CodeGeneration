<lightning_data.PromptDataModule object at 0x7f1d4458fd40>
None
['the orange block is clear, the yellow block is clear, the hand is empty, the blue block is on top of the red block, the orange block is on top of the blue block, the red block is on the table and the yellow block is on the table', 'the blue block is on top of the red block and the yellow block is on top of the orange block', ['pick up the yellow block', 'stack the yellow block on top of the orange block']]
['[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 6, 0]]', '[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]', 'select a function']
Training: |          | 0/? [00:00<?, ?it/s]Training:   0%|          | 0/15 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/15 [00:00<?, ?it/s] Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f1d58204180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f1d58205f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f1d58204180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f1d58206480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f1d58205b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f1d58205c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f1d582099e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f1d5838bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f1d5838be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f1d5820b380>, diagonals=True), functools.partial(<function deletePixels at 0x7f1d5820b380>, diagonals=False), functools.partial(<function predictCNN at 0x7f1d582082c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f1d5820b100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f1d5820a3e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f1d5820aca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f1d583893a0>), functools.partial(<function paintShapesInHalf at 0x7f1d58209bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f1d58209d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f1d5820ade0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f1d5820ae80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f1d5820ae80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f1d5820ae80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f1d5820ae80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f1d5820b4c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f1d58209b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f1d58206700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f1d582098a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f1d44329b50>, newColor=None), functools.partial(<function replicateShapes at 0x7f1d582068e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f1d58205da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f1d582060c0>, deletePixels=False), functools.partial(<function identityM at 0x7f1d583893a0>), functools.partial(<function layShapes at 0x7f1d582065c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f1d58206a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f1d58205e40>), functools.partial(<function cropAllBackground at 0x7f1d58207240>), functools.partial(<function switchColors at 0x7f1d5820b920>)]
Epoch 0:   0%|          | 0/15 [00:07<?, ?it/s]