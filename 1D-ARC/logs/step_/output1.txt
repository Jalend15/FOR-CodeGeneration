<lightning_data.PromptDataModule object at 0x7f719d5a7dd0>
None
['the orange block is clear, the yellow block is clear, the hand is empty, the blue block is on top of the red block, the orange block is on top of the blue block, the red block is on the table and the yellow block is on the table', 'the blue block is on top of the red block and the yellow block is on top of the orange block', ['pick up the yellow block', 'stack the yellow block on top of the orange block']]
['[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 0, 0, 6, 0, 0, 6, 0]]', '[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]', 'select a function']
Training: |          | 0/? [00:00<?, ?it/s]Training:   0%|          | 0/15 [00:00<?, ?it/s]Epoch 0:   0%|          | 0/15 [00:00<?, ?it/s] Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83d04d0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
Action: functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None)
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c834a120>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
Action logits [tensor([-163.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-185.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-114.1875], device='cuda:0', grad_fn=<CopySlices>), tensor([-144.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-128.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-137.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.2500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-49.6875],
        [-71.4375],
        [-25.1875],
        [-28.0625],
        [  0.0000],
        [-30.6875],
        [-14.1875],
        [-23.5625],
        [-24.0625]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[2.6363e-22],
        [9.4425e-32],
        [1.1514e-11],
        [6.4955e-13],
        [1.0000e+00],
        [4.7053e-14],
        [6.8936e-07],
        [5.8470e-11],
        [3.5464e-11]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0000, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.0274658203125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8262690>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0)]
tensor([-74.5625, -92.8125, -46.4375, -49.3125, -48.5625, -76.9375, -61.8125,
          0.0000, -19.2500], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-74.5625, -92.8125, -46.4375, -49.3125, -48.5625, -76.9375, -61.8125,
          0.0000, -19.2500], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([4.1488e-33, 4.9209e-41, 6.7991e-21, 3.8358e-22, 8.1203e-22, 3.8589e-34,
        1.4295e-27, 1.0000e+00, 4.3635e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00, 5.3635e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00, 5.3635e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c834bfe0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True)]
tensor([-66.2500, -88.1250, -41.8750, -44.8750, -30.7500, -50.8750,   0.0000,
         -9.1875,  -5.6875], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0000e+00, 1.0228e-04, 3.3875e-03], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1.0039, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1.0039, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        1.0000e+00, 1.0228e-04, 3.3875e-03], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-66.2500, -88.1250, -41.8750, -44.8750, -30.7500, -50.8750,   0.0000,
         -9.1875,  -5.6875], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([1.6845e-29, 5.3246e-39, 6.4924e-19, 3.2324e-20, 4.4049e-14, 8.0123e-23,
        9.9652e-01, 1.0195e-04, 3.3763e-03], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        9.9652e-01, 1.0196e-04, 3.3763e-03], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        9.9652e-01, 1.0196e-04, 3.3763e-03], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c828d310>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0)]
Action logits [tensor([-169.], device='cuda:0', grad_fn=<CopySlices>), tensor([-186.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-124.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-148.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-80.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-111.5000], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-22.0625],
        [-26.4375],
        [-14.9375],
        [-15.6562],
        [-10.8750],
        [-17.0000],
        [-15.0000],
        [  0.0000],
        [ -7.6875]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[2.6205e-10],
        [3.2987e-12],
        [3.2563e-07],
        [1.5870e-07],
        [1.8926e-05],
        [4.1399e-08],
        [3.0590e-07],
        [1.0000e+00],
        [4.5852e-04]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0005, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function identityM at 0x7f70dc14e2a0>)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c836ca40>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False)]
Action logits [tensor([-164.], device='cuda:0', grad_fn=<CopySlices>), tensor([-185.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-158.], device='cuda:0', grad_fn=<CopySlices>), tensor([-133.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-81.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-104.6250], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-20.7344],
        [-26.0469],
        [-14.6094],
        [-15.3594],
        [-19.2344],
        [-13.2031],
        [  0.0000],
        [-16.2656],
        [ -5.8906]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[9.8895e-10],
        [4.8751e-12],
        [4.5209e-07],
        [2.1355e-07],
        [4.4322e-09],
        [1.8448e-06],
        [1.0000e+00],
        [8.6284e-08],
        [2.7652e-03]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0028, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function identityM at 0x7f70dc14e2a0>)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.1253662109375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c823ee40>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True)]
tensor([-70.1250, -88.3750, -42.0000, -44.8750, -14.8125,   0.0000, -60.3750,
        -57.3750, -52.7500], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.5763e-07, 1.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 3.5763e-07, 1.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-70.1250, -88.3750, -42.0000, -44.8750, -14.8125,   0.0000, -60.3750,
        -57.3750, -52.7500], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([3.5083e-31, 4.1613e-39, 5.7495e-19, 3.2437e-20, 3.6899e-07, 1.0000e+00,
        6.0183e-27, 1.2088e-25, 1.2330e-23], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 3.6999e-07, 1.0000e+00,
        1.0000e-09, 1.0000e-09, 1.0000e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 3.6999e-07, 1.0000e+00,
        1.0000e-09, 1.0000e-09, 1.0000e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c2450>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c2450>, newColor=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33))]
tensor([-59.5625, -80.3125, -34.8125, -37.8125, -90.3125, -19.1250, -23.1250,
        -34.3125,   0.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-59.5625, -80.3125, -34.8125, -37.8125, -90.3125, -19.1250, -23.1250,
        -34.3125,   0.0000], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([1.3562e-26, 1.3205e-35, 7.6054e-16, 3.7865e-17, 5.9949e-40, 4.9445e-09,
        9.0561e-11, 1.2539e-15, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 5.9445e-09,
        1.0906e-09, 1.0000e-09, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 5.9445e-09,
        1.0906e-09, 1.0000e-09, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8205ac0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False)]
Action logits [tensor([-169.], device='cuda:0', grad_fn=<CopySlices>), tensor([-186.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-98.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-210.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.8750], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[ -70.8750],
        [ -88.3750],
        [ -42.3750],
        [ -45.2500],
        [ -57.6250],
        [   0.0000],
        [-112.3750],
        [ -48.1250],
        [ -41.7500]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.6572e-31],
        [4.1613e-39],
        [3.9516e-19],
        [2.2293e-20],
        [9.4141e-26],
        [1.0000e+00],
        [0.0000e+00],
        [1.2577e-21],
        [7.3825e-19]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True)
[[6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8204260>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False)]
Action: functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.0313720703125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c837fcb0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None)]
tensor([-54.1250, -72.3750, -26.0000, -28.8750, -24.6250, -53.6250, -56.5000,
          0.0000, -25.5000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-54.1250, -72.3750, -26.0000, -28.8750, -24.6250, -53.6250, -56.5000,
          0.0000, -25.5000], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([3.1175e-24, 3.6977e-32, 5.1091e-12, 2.8824e-13, 2.0207e-11, 5.1399e-24,
        2.8998e-25, 1.0000e+00, 8.4235e-12], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0051e-09, 1.0003e-09, 1.0202e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00, 1.0084e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0051e-09, 1.0003e-09, 1.0202e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00, 1.0084e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c834bbc0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True)]
tensor([-21.8750, -48.2500,   0.0000,  -2.8750,  -1.5000,  -0.2500,  -7.1250,
        -23.7500, -10.3750], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 1.0000e+00, 5.6427e-02, 2.2314e-01, 7.7881e-01,
        8.0490e-04, 0.0000e+00, 3.1173e-05], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(2.0586, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(2.0586, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 1.0000e+00, 5.6427e-02, 2.2314e-01, 7.7881e-01,
        8.0490e-04, 0.0000e+00, 3.1173e-05], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-21.8750, -48.2500,   0.0000,  -2.8750,  -1.5000,  -0.2500,  -7.1250,
        -23.7500, -10.3750], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([1.5350e-10, 5.3901e-22, 4.8563e-01, 2.7397e-02, 1.0836e-01, 3.7821e-01,
        3.9080e-04, 2.3540e-11, 1.5153e-05], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.1535e-09, 1.0000e-09, 4.8563e-01, 2.7397e-02, 1.0836e-01, 3.7821e-01,
        3.9080e-04, 1.0235e-09, 1.5154e-05], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.1535e-09, 1.0000e-09, 4.8563e-01, 2.7397e-02, 1.0836e-01, 3.7821e-01,
        3.9080e-04, 1.0235e-09, 1.5154e-05], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c1fd0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0)]
Action logits [tensor([-169.], device='cuda:0', grad_fn=<CopySlices>), tensor([-186.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-143.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-127.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-146.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-107.8750], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-61.1250],
        [-78.6250],
        [-32.6250],
        [-35.5000],
        [-47.8750],
        [-19.7500],
        [-31.3750],
        [-38.3750],
        [  0.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[2.8428e-27],
        [7.1383e-35],
        [6.7786e-15],
        [3.8242e-16],
        [1.6149e-21],
        [2.6466e-09],
        [2.3660e-14],
        [2.1575e-17],
        [1.0000e+00]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c32f0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False)]
Action: functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False)
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0 6 6 6 6 6 6 6 6 6 6 6 6 6 6 0 0 0 6 0 0 0 0 6 0 0 0 0 6 0 0 6 0]]
[[0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.022430419921875
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8339220>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True)]
tensor([-69.1250, -87.3750, -41.0000, -43.8750, -42.6250, -13.8125,  -8.4375,
          0.0000, -46.3750], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0133e-06,
        2.1660e-04, 1.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0133e-06,
        2.1660e-04, 1.0000e+00, 0.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-69.1250, -87.3750, -41.0000, -43.8750, -42.6250, -13.8125,  -8.4375,
          0.0000, -46.3750], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([9.5345e-31, 1.1309e-38, 1.5625e-18, 8.8153e-20, 3.0768e-19, 1.0028e-06,
        2.1654e-04, 9.9978e-01, 7.2360e-21], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0038e-06,
        2.1654e-04, 9.9978e-01, 1.0000e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0038e-06,
        2.1654e-04, 9.9978e-01, 1.0000e-09], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c823d370>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True)]
tensor([ -61.1250,  -81.8750,  -36.3750,  -39.3750,  -17.1875,  -47.1250,
         -41.8750, -106.1250,    0.0000], device='cuda:0',
       grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.9605e-08, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 5.9605e-08, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 1.0000e+00], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([ -61.1250,  -81.8750,  -36.3750,  -39.3750,  -17.1875,  -47.1250,
         -41.8750, -106.1250,    0.0000], device='cuda:0',
       grad_fn=<SubBackward0>)
Befora dding  tensor([2.8428e-27, 2.7678e-36, 1.5942e-16, 7.9370e-18, 3.4321e-08, 3.4188e-21,
        6.5151e-19, 8.1376e-47, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 3.5321e-08, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 3.5321e-08, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e+00], device='cuda:0',
       dtype=torch.float64, grad_fn=<AddBackward0>)
length of allowed actions 0.111083984375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83d2240>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c3050>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8207290>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83d2870>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83a7290>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c82060c0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83d11f0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83c2b40>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Input type after conversion (if needed): torch.float32
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c834a420>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83d3950>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c8333050>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c83a7aa0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c836cda0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c823c980>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c823d700>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 33)
Train Output Shape: (1, 33)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 33)
Test Output Shape: (1, 33)
{'test': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'train': [{'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
sample {'input': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 0., 0., 6., 0., 0., 6.,
        0.]], dtype=float32), 'output': array([[0., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 6., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
        0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 33)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 33), falseColor=6.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=6.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='d', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={6.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=6.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=6.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2), functools.partial(<function moveAllShapesToClosest at 0x7f70dc1d3100>, colorsToMove=0, background=6.0, until=1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={6.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=6.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={6.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=6.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=6.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={6.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, subShape=<Task.Shape object at 0x7f70c836c9e0>, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=False, anchorType='subframe', allCombs=False, attributes={'MoCl'}), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=False), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(1, 1), direction=(-1, -1), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 6.0], nChannels=2) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=6.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Length of filtered function list, 4
Training loss 28.215700893379573
Epoch 0:   7%|▋         | 1/15 [02:21<33:01,  0.01it/s]Epoch 0:   7%|▋         | 1/15 [02:21<33:02,  0.01it/s, v_num=92, train/loss_step=28.20]Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None)]
Action: functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True)
[[7 7 7 7 7 7 7 7 7]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True)]
Action logits [tensor([-188.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-154.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-209.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-145.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-89.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-169.5000], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-24.7812],
        [-16.3125],
        [-29.9688],
        [-12.5938],
        [-14.0312],
        [-12.5938],
        [  0.0000],
        [-20.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.7284e-11],
        [8.2332e-08],
        [9.6547e-14],
        [3.3932e-06],
        [8.0595e-07],
        [3.3932e-06],
        [1.0000e+00],
        [2.0612e-09]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0000, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud')
[[7 7 7 7 0 0 0 0 0]]
[[7 7 7 7 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
three losses, 2, 1.5, 0.029632568359375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None)]
tensor([ -86.3750,  -51.8750, -107.0000,    0.0000,  -45.6250,  -34.8750,
          -9.3125,  -36.1250], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
        9.0301e-05, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00, 0.0000e+00,
        9.0301e-05, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([ -86.3750,  -51.8750, -107.0000,    0.0000,  -45.6250,  -34.8750,
          -9.3125,  -36.1250], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([3.0745e-38, 2.9576e-23, 3.3920e-47, 9.9991e-01, 1.5321e-20, 7.1440e-16,
        9.0280e-05, 2.0468e-16], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9991e-01, 1.0000e-09, 1.0000e-09,
        9.0281e-05, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9991e-01, 1.0000e-09, 1.0000e-09,
        9.0281e-05, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
tensor([-77.8125, -43.3125, -97.6875,   0.0000, -30.8125, -27.9375, -30.5625,
        -31.3125], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 1., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 1., 0., 0., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([-77.8125, -43.3125, -97.6875,   0.0000, -30.8125, -27.9375, -30.5625,
        -31.3125], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([1.6086e-34, 1.5475e-19, 3.7571e-43, 1.0000e+00, 4.1524e-14, 7.3603e-13,
        5.3318e-14, 2.5186e-14], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e+00, 1.0000e-09, 1.0007e-09,
        1.0001e-09, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e+00, 1.0000e-09, 1.0007e-09,
        1.0001e-09, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
Action: functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2)
[[0 0 7 7 7 7 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
Action: functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)
[[0 0 0 0 0 0 0 0 0]]
[[0 0 0 0 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
three losses, 2, 1.5, 0.0192108154296875
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True)]
tensor([ -87.5625,  -53.0625, -108.1875,  -37.3125,  -39.5625, -111.4375,
           0.0000,  -40.5625], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 0., 1., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([ -87.5625,  -53.0625, -108.1875,  -37.3125,  -39.5625, -111.4375,
           0.0000,  -40.5625], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([9.3776e-39, 9.0209e-24, 1.0346e-47, 6.2429e-17, 6.5800e-18, 4.0115e-49,
        1.0000e+00, 2.4206e-18], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e+00, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e+00, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True)]
tensor([ -91.0000,  -57.8750, -113.3750,  -43.0000,  -44.2500,  -46.8750,
         -44.8750,    0.0000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 0., 0., 1.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([ -91.0000,  -57.8750, -113.3750,  -43.0000,  -44.2500,  -46.8750,
         -44.8750,    0.0000], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([3.0144e-40, 7.3317e-26, 5.7791e-50, 2.1151e-19, 6.0600e-20, 4.3898e-21,
        3.2437e-20, 1.0000e+00], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e+00], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None)]
Action logits [tensor([-187.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-152.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-208.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-135.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-88.9375], device='cuda:0', grad_fn=<CopySlices>), tensor([-144.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.7500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[ -98.5625],
        [ -63.9375],
        [-119.1875],
        [ -46.5625],
        [   0.0000],
        [ -55.5625],
        [ -51.3125],
        [ -50.8125]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.5695e-43],
        [1.7072e-28],
        [0.0000e+00],
        [6.0002e-21],
        [1.0000e+00],
        [7.4048e-25],
        [5.1912e-23],
        [8.5588e-23]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud')
[[7 7 7 7 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False)]
Action logits [tensor([-189.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-155.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-209.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.8750], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[-50.2500],
        [-16.2500],
        [-70.8750],
        [ -2.8750],
        [ -4.0000],
        [  0.0000],
        [ -2.7500],
        [  0.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.5021e-22],
        [8.7642e-08],
        [1.6572e-31],
        [5.6416e-02],
        [1.8316e-02],
        [1.0000e+00],
        [6.3928e-02],
        [1.0000e+00]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(2.1387, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False)
[[7 7 7 7 0 0 0 0 0]]
[[7 7 7 7 0 0 0 0 0]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
three losses, 2, 1.5, 0.021728515625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True)]
tensor([ -84.3750,  -49.8750, -105.0000,  -34.0000,  -33.6250,    0.0000,
          -9.8750,  -33.5000], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        5.1439e-05, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        5.1439e-05, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([ -84.3750,  -49.8750, -105.0000,  -34.0000,  -33.6250,    0.0000,
          -9.8750,  -33.5000], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([2.2719e-37, 2.1854e-22, 2.5064e-46, 1.7138e-15, 2.4936e-15, 9.9995e-01,
        5.1442e-05, 2.8256e-15], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9995e-01,
        5.1443e-05, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9995e-01,
        5.1443e-05, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True)]
tensor([-50.0000, -16.0000, -70.5000,  -0.1250,   0.0000,  -3.2500,  -3.2500,
         -1.2500], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 1.1921e-07, 0.0000e+00, 8.8232e-01, 1.0000e+00, 3.8788e-02,
        3.8788e-02, 2.8662e-01], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(2.2461, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(2.2461, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 1.1921e-07, 0.0000e+00, 8.8232e-01, 1.0000e+00, 3.8788e-02,
        3.8788e-02, 2.8662e-01], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([-50.0000, -16.0000, -70.5000,  -0.1250,   0.0000,  -3.2500,  -3.2500,
         -1.2500], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([8.5854e-23, 5.0092e-08, 1.0733e-31, 3.9282e-01, 4.4513e-01, 1.7259e-02,
        1.7259e-02, 1.2753e-01], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 5.1092e-08, 1.0000e-09, 3.9282e-01, 4.4513e-01, 1.7259e-02,
        1.7259e-02, 1.2753e-01], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 5.1092e-08, 1.0000e-09, 3.9282e-01, 4.4513e-01, 1.7259e-02,
        1.7259e-02, 1.2753e-01], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False)]
Action: functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True)
[[7 7 7 7]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function switchColors at 0x7f70dc1d3920>), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
Action logits [tensor([-189.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-154.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-208.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-110.4375], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-80.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-95.4375], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.3750], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-27.1875],
        [-18.5312],
        [-31.9688],
        [ -7.5156],
        [-14.5625],
        [  0.0000],
        [ -3.7656],
        [-15.0000]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.5582e-12],
        [8.9532e-09],
        [1.3066e-14],
        [5.4451e-04],
        [4.7379e-07],
        [1.0000e+00],
        [2.3153e-02],
        [3.0590e-07]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.0237, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function switchColors at 0x7f70dc1d3920>)
[[0 0 0 0 7 7 7 7 7]]
[[0 0 0 0 7 7 7 7 7]]
[[0, 0, 7, 7, 7, 7, 0, 0, 0]]
three losses, 2, 1.5, 0.03851318359375
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False)]
tensor([ -90.5625,  -56.0625, -111.1875,  -25.1875,  -40.1875,    0.0000,
         -43.0625,  -42.4375], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0., 0., 0., 0., 0., 1., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0., 0., 0., 0., 0., 1., 0., 0.], device='cuda:0',
       grad_fn=<ExpBackward0>)
logits tensor([ -90.5625,  -56.0625, -111.1875,  -25.1875,  -40.1875,    0.0000,
         -43.0625,  -42.4375], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([4.6688e-40, 4.4912e-25, 5.1509e-49, 1.1514e-11, 3.5220e-18, 1.0000e+00,
        1.9870e-19, 3.7122e-19], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0115e-09, 1.0000e-09, 1.0000e+00,
        1.0000e-09, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0115e-09, 1.0000e-09, 1.0000e+00,
        1.0000e-09, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
[functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None)]
tensor([ -86.5625,  -52.1875, -106.0625,  -34.4375,    0.0000,  -39.9375,
          -8.1875,  -37.9375], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
        2.7800e-04, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00, 0.0000e+00,
        2.7800e-04, 0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([ -86.5625,  -52.1875, -106.0625,  -34.4375,    0.0000,  -39.9375,
          -8.1875,  -37.9375], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([2.5484e-38, 2.1634e-23, 8.6601e-47, 1.1063e-15, 9.9972e-01, 4.5211e-18,
        2.7803e-04, 3.3407e-17], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9972e-01, 1.0000e-09,
        2.7803e-04, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.9972e-01, 1.0000e-09,
        2.7803e-04, 1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.125
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Input type after conversion (if needed): torch.float32
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 9)
Train Output Shape: (1, 9)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 9)
Test Output Shape: (1, 9)
{'test': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'train': [{'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
sample {'input': array([[7., 7., 7., 7., 0., 0., 0., 0., 0.]], dtype=float32), 'output': array([[0., 0., 7., 7., 7., 7., 0., 0., 0.]], dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 9)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 9), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[0, 0, 1, 1, 1, 1, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=0.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={0.0: 7.0, 7.0: 0.0}), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=0.0, outColor=7.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='lr'), functools.partial(<function mirror at 0x7f70dc1d3600>, axis='ud'), functools.partial(<function flipAllShapes at 0x7f70dc1d3740>, axis='lr', color=[1, 2, 3, 4, 5, 6, 7, 8, 9], background=0.0, diagonal=True), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2), functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5), functools.partial(<function doPixelMod3Col at 0x7f70dc1d2700>, rules={(7.0, 2): 0.0, (7.0, 0): 7.0, (0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={0.0, 7.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=0.0, color=7.0, half='l', diagonal=True, middle=False), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={0.0, 7.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=0.0, fillColor=7.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=0.0), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=7.0, fillColor=7.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=0.0, outColor=7.0, bigOrSmall=None, isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=7.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, diagonal=True, multicolor=True, deleteOriginal=True, anchorType='subframe'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=True, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function twoShapeFun at 0x7f70dc1d7560>, f=functools.partial(<function pixelwiseAnd at 0x7f70dc1d3e20>, falseColor=0.0, targetColor=None, trueColor=7.0), diagonal=True, multicolor=False, typ=1, crop=0, flip=True, downsizeToSmallest=True), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=False), functools.partial(<function cropOnlyMulticolorShape at 0x7f70dc1d72e0>, diagonals=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(5, 5), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(2, 2, 2, 2), value=0)
), commonColors=[0.0, 7.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[7.0], background=0.0, direction='r', until=-2, nSteps=2) can transform the state successfully
Function functools.partial(<function executePixelRecolor at 0x7f70dc1d22a0>, Best_Dict={(0, 0, 7.0): 0.0, (0, 1, 7.0): 0.0, (0, 4, 0.0): 7.0, (0, 0, 0.0): 7.0}, Best_v=0, Best_Q1=1, Best_Q2=5) can transform the state successfully
Length of filtered function list, 3
Training loss 3.26037406923373e-05
Epoch 0:  13%|█▎        | 2/15 [04:15<27:38,  0.01it/s, v_num=92, train/loss_step=28.20]Epoch 0:  13%|█▎        | 2/15 [04:15<27:39,  0.01it/s, v_num=92, train/loss_step=3.26e-5]Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Action: functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0)
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 3 0 0 3 0 0 0 3 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32))]
Action: functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set())
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.0194091796875
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None)]
tensor([-63.2500,   0.0000,  -1.0000, -92.1250, -43.1250, -40.6250, -50.6250,
        -40.8750, -52.6250, -41.1250, -44.5000,  -6.6250, -51.7500, -99.0000,
        -40.3750, -41.0000, -21.1250, -39.0000, -41.1250], device='cuda:0',
       grad_fn=<SubBackward0>)
tensor([0.0000, 1.0000, 0.3679, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0013, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1.3691, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1.3691, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000, 1.0000, 0.3679, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0013, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([-63.2500,   0.0000,  -1.0000, -92.1250, -43.1250, -40.6250, -50.6250,
        -40.8750, -52.6250, -41.1250, -44.5000,  -6.6250, -51.7500, -99.0000,
        -40.3750, -41.0000, -21.1250, -39.0000, -41.1250], device='cuda:0',
       grad_fn=<SubBackward0>)
Befora dding  tensor([2.4797e-28, 7.3035e-01, 2.6868e-01, 7.1475e-41, 1.3633e-19, 1.6608e-18,
        7.5400e-23, 1.2934e-18, 1.0204e-23, 1.0073e-18, 3.4469e-20, 9.6901e-04,
        2.4479e-23, 7.3855e-44, 2.1325e-18, 1.1415e-18, 4.8872e-10, 8.4342e-18,
        1.0073e-18], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 7.3035e-01, 2.6868e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.6902e-04,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.4887e-09, 1.0000e-09,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 7.3035e-01, 2.6868e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.6902e-04,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.4887e-09, 1.0000e-09,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.052642822265625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0)]
tensor([-62.1875,   0.0000,  -1.1875, -91.3125, -43.6875, -41.1875, -51.1875,
        -41.1875, -52.6875, -42.4375, -45.4375,  -6.4375, -51.5625, -99.1875,
        -22.1875, -70.6875, -42.5625,  -3.8125, -12.9375], device='cuda:0',
       grad_fn=<SubBackward0>)
tensor([0.0000e+00, 1.0000e+00, 3.0493e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6003e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.2095e-02,
        2.3842e-06], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1.3291, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1.3291, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 1.0000e+00, 3.0493e-01, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.6003e-03,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 2.2095e-02,
        2.3842e-06], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([-62.1875,   0.0000,  -1.1875, -91.3125, -43.6875, -41.1875, -51.1875,
        -41.1875, -52.6875, -42.4375, -45.4375,  -6.4375, -51.5625, -99.1875,
        -22.1875, -70.6875, -42.5625,  -3.8125, -12.9375], device='cuda:0',
       grad_fn=<SubBackward0>)
Befora dding  tensor([7.3942e-28, 7.5263e-01, 2.2954e-01, 1.6598e-40, 8.0046e-20, 9.7516e-19,
        4.4272e-23, 9.7516e-19, 9.8785e-24, 2.7939e-19, 1.3910e-20, 1.2045e-03,
        3.0428e-23, 6.3095e-44, 1.7405e-10, 1.5045e-31, 2.4656e-19, 1.6628e-02,
        1.8109e-06], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 7.5263e-01, 2.2954e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.2045e-03,
        1.0000e-09, 1.0000e-09, 1.1740e-09, 1.0000e-09, 1.0000e-09, 1.6628e-02,
        1.8119e-06], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 7.5263e-01, 2.2954e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.2045e-03,
        1.0000e-09, 1.0000e-09, 1.1740e-09, 1.0000e-09, 1.0000e-09, 1.6628e-02,
        1.8119e-06], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.052642822265625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Action: functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True)
[[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0)]
Action logits [tensor([-157.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-98.], device='cuda:0', grad_fn=<CopySlices>), tensor([-99.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-188.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-142.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-148.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-139.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-151.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-144.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-105.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-150.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-196.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-235.], device='cuda:0', grad_fn=<CopySlices>), tensor([-116.4375], device='cuda:0', grad_fn=<CopySlices>), tensor([-171.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-126.3125], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 1.0
tensor([[ -59.5000],
        [   0.0000],
        [  -1.0625],
        [ -90.3750],
        [ -44.3750],
        [ -40.5000],
        [ -50.5000],
        [ -41.7500],
        [ -53.1250],
        [ -43.2500],
        [ -46.3750],
        [  -7.0625],
        [ -52.1250],
        [ -98.3750],
        [-137.0000],
        [ -18.4375],
        [ -73.7500],
        [ -43.6250],
        [ -28.3125]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[1.4437e-26],
        [1.0000e+00],
        [3.4559e-01],
        [5.6317e-40],
        [5.3479e-20],
        [2.5768e-18],
        [1.1698e-22],
        [7.3825e-19],
        [8.4743e-24],
        [1.6473e-19],
        [7.2376e-21],
        [8.5663e-04],
        [2.3036e-23],
        [1.8918e-43],
        [0.0000e+00],
        [9.8332e-09],
        [9.3494e-33],
        [1.1321e-19],
        [5.0587e-13]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.3464, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False)
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]]
[[3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
three losses, 2, 1.5, 0.030181884765625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True)]
tensor([ -63.2500,    0.0000,   -1.0000,  -92.1250,  -43.1250,  -40.6250,
         -50.6250,  -40.8750,  -52.6250,  -41.1250,  -44.5000,   -6.6250,
         -51.7500,  -99.0000,  -17.6250,  -40.8750,  -25.9375,  -63.7500,
        -106.1250], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000, 1.0000, 0.3679, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0013, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1.3691, device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1.3691, device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000, 1.0000, 0.3679, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000, 0.0000, 0.0013, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
        0.0000], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([ -63.2500,    0.0000,   -1.0000,  -92.1250,  -43.1250,  -40.6250,
         -50.6250,  -40.8750,  -52.6250,  -41.1250,  -44.5000,   -6.6250,
         -51.7500,  -99.0000,  -17.6250,  -40.8750,  -25.9375,  -63.7500,
        -106.1250], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([2.4797e-28, 7.3035e-01, 2.6868e-01, 7.1475e-41, 1.3633e-19, 1.6608e-18,
        7.5400e-23, 1.2934e-18, 1.0204e-23, 1.0073e-18, 3.4469e-20, 9.6901e-04,
        2.4479e-23, 7.3855e-44, 1.6184e-08, 1.2934e-18, 3.9721e-12, 1.5040e-28,
        5.9433e-47], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 7.3035e-01, 2.6868e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.6902e-04,
        1.0000e-09, 1.0000e-09, 1.7184e-08, 1.0000e-09, 1.0040e-09, 1.0000e-09,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 7.3035e-01, 2.6868e-01, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 9.6902e-04,
        1.0000e-09, 1.0000e-09, 1.7184e-08, 1.0000e-09, 1.0040e-09, 1.0000e-09,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.052642822265625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32))]
tensor([ -77.4375,  -17.2500,  -18.2500, -107.4375,  -61.8125,  -58.0625,
         -68.0625,  -59.3125,  -70.8125,  -60.3125,  -63.4375,  -24.6250,
         -69.1875, -115.6875,  -78.6875,  -32.5000,  -59.9375,    0.0000,
         -35.1250], device='cuda:0', grad_fn=<SubBackward0>)
tensor([0.0000e+00, 5.9605e-08, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
action logits tensor(1., device='cuda:0', grad_fn=<SumBackward0>)
expo tensor([0.0000e+00, 5.9605e-08, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00,
        0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 0.0000e+00, 1.0000e+00,
        0.0000e+00], device='cuda:0', grad_fn=<ExpBackward0>)
logits tensor([ -77.4375,  -17.2500,  -18.2500, -107.4375,  -61.8125,  -58.0625,
         -68.0625,  -59.3125,  -70.8125,  -60.3125,  -63.4375,  -24.6250,
         -69.1875, -115.6875,  -78.6875,  -32.5000,  -59.9375,    0.0000,
         -35.1250], device='cuda:0', grad_fn=<SubBackward0>)
Befora dding  tensor([2.3406e-34, 3.2242e-08, 1.1861e-08, 2.1902e-47, 1.4295e-27, 6.0782e-26,
        2.7595e-30, 1.7414e-26, 1.7641e-31, 6.4064e-27, 2.8148e-28, 2.0207e-11,
        8.9588e-31, 5.7221e-51, 6.7058e-35, 7.6812e-15, 9.3213e-27, 1.0000e+00,
        5.5642e-16], device='cuda:0', dtype=torch.float64,
       grad_fn=<DivBackward0>)
Training loss probs after epsilon: tensor([1.0000e-09, 3.3242e-08, 1.2861e-08, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0202e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e+00,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
traing loss probs: tensor([1.0000e-09, 3.3242e-08, 1.2861e-08, 1.0000e-09, 1.0000e-09, 1.0000e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0202e-09,
        1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e-09, 1.0000e+00,
        1.0000e-09], device='cuda:0', dtype=torch.float64,
       grad_fn=<AddBackward0>)
length of allowed actions 0.052642822265625
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v')]
Action logits [tensor([-160.3750], device='cuda:0', grad_fn=<CopySlices>), tensor([-97.], device='cuda:0', grad_fn=<CopySlices>), tensor([-98.0625], device='cuda:0', grad_fn=<CopySlices>), tensor([-189.], device='cuda:0', grad_fn=<CopySlices>), tensor([-140.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.], device='cuda:0', grad_fn=<CopySlices>), tensor([-148.], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.], device='cuda:0', grad_fn=<CopySlices>), tensor([-149.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.2500], device='cuda:0', grad_fn=<CopySlices>), tensor([-141.6250], device='cuda:0', grad_fn=<CopySlices>), tensor([-103.8750], device='cuda:0', grad_fn=<CopySlices>), tensor([-148.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-196.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-110.], device='cuda:0', grad_fn=<CopySlices>), tensor([-132.5000], device='cuda:0', grad_fn=<CopySlices>), tensor([-93.1250], device='cuda:0', grad_fn=<CopySlices>), tensor([-154.7500], device='cuda:0', grad_fn=<CopySlices>), tensor([-138.7500], device='cuda:0', grad_fn=<CopySlices>)]
pf_temp 4.0
tensor([[-16.8125],
        [ -0.9688],
        [ -1.2344],
        [-23.9688],
        [-11.7812],
        [-11.2188],
        [-13.7188],
        [-11.2188],
        [-14.1250],
        [-11.2812],
        [-12.1250],
        [ -2.6875],
        [-13.9062],
        [-25.7500],
        [ -4.2188],
        [ -9.8438],
        [  0.0000],
        [-15.4062],
        [-11.4062]], device='cuda:0', dtype=torch.float32,
       grad_fn=<SubBackward0>)
tensor([[4.9937e-08],
        [3.7956e-01],
        [2.9102e-01],
        [3.8950e-11],
        [7.6466e-06],
        [1.3420e-05],
        [1.1016e-06],
        [1.3420e-05],
        [7.3382e-07],
        [1.2607e-05],
        [5.4222e-06],
        [6.8051e-02],
        [9.1326e-07],
        [6.5602e-12],
        [1.4717e-02],
        [5.3078e-05],
        [1.0000e+00],
        [2.0377e-07],
        [1.1126e-05]], device='cuda:0', dtype=torch.float32,
       grad_fn=<ExpBackward0>)
tensor(1.7535, device='cuda:0', dtype=torch.float32, grad_fn=<SumBackward0>)
Action: functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>)
[[3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0]]
Train Input Type: float32
Train Output Type: float32
Train Input Shape: (1, 32)
Train Output Shape: (1, 32)
Test Input Type: float32
Test Output Type: float32
Test Input Shape: (1, 32)
Test Output Shape: (1, 32)
{'test': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'train': [{'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}], 'uuid': 'some_unique_identifier'}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
sample {'input': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 3., 0.,
        0., 3., 0., 0., 0., 3., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32), 'output': array([[3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 3., 0., 0., 0., 0.,
        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.]],
      dtype=float32)}
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
Input type after conversion (if needed): torch.float32
[functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32)), functools.partial(<function downsizeMode at 0x7f70dc1d5f80>, newShape=(1, 32)), functools.partial(<function downsize at 0x7f70dc1d4180>, newShape=(1, 32), falseColor=0.0), functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function countColors at 0x7f70dc1d5b20>, rotate=-1, outBackgroundColor=0.0, flip=True, sliced=False, ignore='max', outShape='inShape', byShape=True), functools.partial(<function countShapes at 0x7f70dc1d5c60>, color=3.0, outShape='inShape', lay='h', outColor=None, shape=None, skip=True), functools.partial(<function colorMap at 0x7f70dc1d19e0>, cMap={3.0: 0.0}), functools.partial(<function symmetrize at 0x7f70dc18bd80>, axis=['ud'], color=3.0), functools.partial(<function colorSymmetricPixels at 0x7f70dc18be20>, inColor=3.0, outColor=0.0, axis='lr', includeAxis=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function doPixelMod2Row at 0x7f70dc1d23e0>, rules={(0.0, 1): 0.0}), functools.partial(<function extendColor at 0x7f70dc1d2ca0>, direction='r', cic={3.0}, fixedColors=set(), deleteIfBorder=True, breakAtFixedColor=True, mergeColor=None), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function paintShapesInHalf at 0x7f70dc1d1bc0>, shapeColor=3.0, color=0.0, half='u', diagonal=True, middle=None), functools.partial(<function paintShapeFromBorderColor at 0x7f70dc1d1d00>, shapeColors={3.0}, fixedColors=set(), diagonals=True), functools.partial(<function fillRectangleInside at 0x7f70dc1d2de0>, rectangleColor=3.0, fillColor=0.0), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='h'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='hv'), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='d'), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, connColor=0.0, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, lineExclusive=True, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=False), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall=None, isBorder=None), functools.partial(<function alignShapes at 0x7f70dc1d6700>, refColor=0.0), functools.partial(<function symmetrizeSubmatrix at 0x7f70dc1d18a0>, lr=True, ud=True, rotation=False, newColor=None), functools.partial(<function replicateShapes at 0x7f70dc1d68e0>, attributes={'UnCo'}, diagonal=True, multicolor=False, anchorType='all', anchorColor=3.0, allCombs=True, scale=False, deleteOriginal=True), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function identityM at 0x7f70dc14e2a0>), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function replicateOneShape at 0x7f70dc1d6a20>, lay='pixelwise', multicolor=False, paintLikePix=True), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>), functools.partial(<function cropAllBackground at 0x7f70dc1d7240>), functools.partial(<function switchColors at 0x7f70dc1d3920>)]
Function functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True) can transform the state successfully
Function functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False) can transform the state successfully
Input type after conversion (if needed): torch.float32
Function functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2) can transform the state successfully
Function functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}) can transform the state successfully
Function functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True) can transform the state successfully
Function functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None) can transform the state successfully
Function functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True) can transform the state successfully
Function functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}) can transform the state successfully
Function functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False) can transform the state successfully
Length of filtered function list, 14
[functools.partial(<function arrangeShapes at 0x7f70dc1d6480>, outDummyMatrix=array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=uint8), outDummyColor=0.0), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=True), functools.partial(<function deletePixels at 0x7f70dc1d3380>, diagonals=False), functools.partial(<function predictCNN at 0x7f70dc1d02c0>, model=OneConvModel(
  (conv): Conv2d(2, 2, kernel_size=(3, 3), stride=(1, 1), bias=False)
  (pad): ConstantPad2d(padding=(1, 1, 1, 1), value=0)
), commonColors=[0.0, 3.0], nChannels=2), functools.partial(<function moveAllShapes at 0x7f70dc1d2fc0>, color=[3.0], background=0.0, direction='l', until=-1), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set()), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, connColor=0.0, fixedColors=set(), diagonal=True), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}), functools.partial(<function connectAnyPixels at 0x7f70dc1d34c0>, pixelColor=0.0, allowedChanges={3.0: 0.0}, diagonal=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=True), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='small', isBorder=None), functools.partial(<function colorByPixels at 0x7f70dc1d60c0>, deletePixels=True), functools.partial(<function deleteShapes at 0x7f70dc1d6340>, diagonal=True, multicolor=True, attributes={'MoCo'}), functools.partial(<function layShapes at 0x7f70dc1d65c0>, firstPos=(0, 0), diagonal=True, multicolor=False, outShape='inShape', overlap=(0, 0), direction=(1, 0), sortBy='grid', reverse=False), functools.partial(<function colorLongestLines at 0x7f70dc1d2e80>, cic=3.0, coc=0.0, direction='v'), functools.partial(<function changeShapes at 0x7f70dc1d1b20>, inColor=3.0, outColor=0.0, bigOrSmall='big', isBorder=True), functools.partial(<function switchColors at 0x7f70dc1d3920>), functools.partial(<function symmetrizeAllShapes at 0x7f70dc1d5da0>, targetColor=0.0), functools.partial(<function paintGridLikeBackground at 0x7f70dc1d5e40>)]
Epoch 0:  13%|█▎        | 2/15 [04:58<32:20,  0.01it/s, v_num=92, train/loss_step=3.26e-5]